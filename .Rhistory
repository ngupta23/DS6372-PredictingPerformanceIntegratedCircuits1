library(mosaic)
library(usdm) #for multicollinearity
library(caTools)
sessionInfo()
output.var = params$output.var
transform.abs = params$transform.abs
log.pred = params$log.pred
eda = params$eda
algo.forward = params$algo.forward
algo.backward = params$algo.backward
algo.stepwise = params$algo.stepwise
algo.LASSO = params$algo.LASSO
algo.LARS = params$algo.LARS
message("Parameters used for training/prediction: ")
str(params)
apply(params,print)
lapply(params,print)
lapply(params,message)
str(params)
params
str(params)
# Setup Labels
# alt.scale.label.name = Alternate Scale variable name
#   - if predicting on log, then alt.scale is normal scale
#   - if predicting on normal scale, then alt.scale is log scale
if (log.pred == TRUE){
label.names = paste('log.',output.var,sep="")
alt.scale.label.name = output.var
}
if (log.pred == FALSE){
label.names = output.var
alt.scale.label.name = paste('log.',output.var,sep="")
}
cc  = complete.cases(data.ori)
data = data.ori[cc,]
knitr::opts_chunk$set(echo = TRUE)
library(usdm) #for multicollinearity
library(tidyverse)
library(ggplot2)
library(PerformanceAnalytics)
library(MASS)
library(glmnet)
library(investr)
library(ggiraph)
library(ggiraphExtra) #https://cran.r-project.org/web/packages/ggiraphExtra/vignettes/ggPredict.html
library(DT)
library(mosaic)
library(usdm) #for multicollinearity
library(caTools)
sessionInfo()
output.var = params$output.var
transform.abs = params$transform.abs
log.pred = params$log.pred
eda = params$eda
algo.forward = params$algo.forward
algo.backward = params$algo.backward
algo.stepwise = params$algo.stepwise
algo.LASSO = params$algo.LASSO
algo.LARS = params$algo.LARS
message("Parameters used for training/prediction: ")
str(params)
# Setup Labels
# alt.scale.label.name = Alternate Scale variable name
#   - if predicting on log, then alt.scale is normal scale
#   - if predicting on normal scale, then alt.scale is log scale
if (log.pred == TRUE){
label.names = paste('log.',output.var,sep="")
alt.scale.label.name = output.var
}
if (log.pred == FALSE){
label.names = output.var
alt.scale.label.name = paste('log.',output.var,sep="")
}
feat  = read.csv('../../Data/features.csv')
labels = read.csv('../../Data/labels.csv')
predictors = names(dplyr::select(feat,-JobName))
target = 'y3'
data.ori = inner_join(feat,select_at(labels,c('JobName',target)),by='JobName')
cc  = complete.cases(data.ori)
data.notComplete = data.ori[! cc,]
data = data.ori[cc,]
message('Non-Complete cases: ',nrow(data.notComplete))
cc  = complete.cases(data.ori)
data.notComplete = data.ori[! cc,]
data = data.ori[cc,]
message('Non-Complete cases: ',nrow(data.notComplete))
message('Complete cases: ',nrow(data))
df=data %>%
mutate(x18sqrt = sqrt(x18)
,y3log = log(y3)
)
target='y3log'
cols=c('y3','y3log','x18','x18sqrt')
ggplot(gather(select_at(df,cols)), aes(value)) +
geom_histogram(aes(y=..density..),bins = 50,fill='light blue') +
geom_density() +
facet_wrap(~key, scales = 'free',ncol=4)
d = gather(dplyr::select_at(data,cols),key=target,value=value,-y3)
d = gather(dplyr::select_at(df,cols),key=target,value=value,-y3)
ggplot(data=d, aes(x=value,y=y3)) +
geom_point(color='light blue',alpha=0.5) +
geom_smooth(method='lm') +
facet_wrap(~target, scales = 'free',ncol=4)
cols[!cols %in% c('y3')]
target
cols2=cols[!cols %in% c('y3')]
d = gather(dplyr::select_at(df,cols2),key=target,value=value,-y3)
cols2
df
df=data %>%
mutate(x18sqrt = sqrt(x18)
,y3log = log(y3)
)
target='y3log'
cols=c('y3','y3log','x18','x18sqrt')
ggplot(gather(select_at(df,cols)), aes(value)) +
geom_histogram(aes(y=..density..),bins = 50,fill='light blue') +
geom_density() +
facet_wrap(~key, scales = 'free',ncol=4)
cols2=cols[!cols %in% c('y3')]
d = gather(dplyr::select_at(df,cols2),key=target,value=value,-y3)
df
cols2
target
cols2=cols[!cols %in% c('y3')]
d = gather(dplyr::select_at(df,cols2),key=target,value=value,-y3log)
ggplot(data=d, aes(x=value,y=y3)) +
geom_point(color='light blue',alpha=0.5) +
geom_smooth(method='lm') +
facet_wrap(~target, scales = 'free',ncol=4)
cols2=cols[!cols %in% c('y3')]
d = gather(dplyr::select_at(df,cols2),key=target,value=value,-y3log)
ggplot(data=d, aes(x=value,y=y3log)) +
geom_point(color='light blue',alpha=0.5) +
geom_smooth(method='lm') +
facet_wrap(~target, scales = 'free',ncol=4)
d = gather(dplyr::select_at(df,cols2),key=target,value=value,-y3log)
d
cols2=cols[!cols %in% c('y3')]
d = gather(dplyr::select_at(df,cols2),key=target,value=value,-y3log)
ggplot(data=d, aes(x=value,y=y3log)) +
geom_point(color='light blue',alpha=0.5) +
geom_smooth(method='lm') +
facet_wrap(~target, scales = 'free',ncol=4)
df=data %>%
mutate(x18sqrt = sqrt(x18)
,y3log = log10(y3)
)
target='y3log'
cols=c('y3','y3log','x18','x18sqrt')
ggplot(gather(select_at(df,cols)), aes(value)) +
geom_histogram(aes(y=..density..),bins = 50,fill='light blue') +
geom_density() +
facet_wrap(~key, scales = 'free',ncol=4)
df=data %>%
mutate(x18sqrt = sqrt(x18)
,y3log = log(y3)
)
target='y3log'
cols=c('y3','y3log','x18','x18sqrt')
ggplot(gather(select_at(df,cols)), aes(value)) +
geom_histogram(aes(y=..density..),bins = 50,fill='light blue') +
geom_density() +
facet_wrap(~key, scales = 'free',ncol=4)
cols2=cols[!cols %in% c('y3')]
d = gather(dplyr::select_at(df,cols2),key=target,value=value,-y3log)
ggplot(data=d, aes(x=value,y=y3log)) +
geom_point(color='light blue',alpha=0.5) +
geom_smooth() +
facet_wrap(~target, scales = 'free',ncol=4)
cols2=cols[!cols %in% c('y3')]
d = gather(dplyr::select_at(df,cols2),key=target,value=value,-y3log)
ggplot(data=d, aes(x=value,y=y3log)) +
geom_point(color='light blue',alpha=0.5) +
geom_smooth() +
facet_wrap(~target, scales = 'free',ncol=4)
ggplot(gather(select_at(df,cols)), aes(value)) +
geom_histogram(aes(y=..density..),bins = 50,fill='light blue') +
geom_density() +
facet_wrap(~key, scales = 'free',ncol=4)
install.packages('pacman')
pacman::p_load(usdm,tidyverse)
library(pacman)
pacman::p_load(usdm,tidyverse,ggplot2,PerfoPerformanceAnalytics,MASS,glmnet,investr,ggiraph,ggiraphExtra
,DT,mosaic,usdm,caTools)
pacman::p_load(usdm,tidyverse,ggplot2,PerformanceAnalytics,MASS,glmnet,investr,ggiraph,ggiraphExtra
,DT,mosaic,usdm,caTools)
remove.packages("DT", lib="~/R/win-library/3.5")
pacman::p_load(usdm,tidyverse,ggplot2,PerformanceAnalytics,MASS,glmnet,investr,ggiraph,ggiraphExtra
,DT,mosaic,usdm,caTools)
pacman::p_load(usdm,tidyverse,ggplot2,PerformanceAnalytics,MASS,glmnet,investr,ggiraph,ggiraphExtra
,DT,mosaic,usdm,caTools)
DT::addRow()
library(pacman) #manages autoinstallation of packages
pacman::p_load(usdm,tidyverse,ggplot2,PerformanceAnalytics,MASS,glmnet,investr,ggiraph,ggiraphExtra
,DT,mosaic,usdm,caTools)
pacman::p_load(usdm,tidyverse,ggplot2,PerformanceAnalytics,MASS,glmnet,investr,ggiraph,ggiraphExtra
,DT,mosaic,usdm,caTools,onewaytests)
onewaytests::bf.test(data$y3)
data$y3
onewaytests::bf.test(y3~.,data=data)
onewaytests::bf.test(y3~x1,data=data)
onewaytests::bf.test(y3,data=data)
names(data)
onewaytests::bf.test(y3~,data=data)
onewaytests::bf.test(~y3,data=data)
onewaytests::bf.test(.~y3,data=data)
aov.test(data$y3)
shapiro.test(data$y3)
ks.test(data$y3)
ks.test(x=data$y3)
ad.test(x=data$y3)
install.packages('nortest')
install.packages("nortest")
ad.test(data$y3)
nortest::ad.test(data$y3)
nortest::ad.test(df$y3log)
knitr::opts_chunk$set(echo = TRUE)
library(pacman) #manages autoinstallation of packages
pacman::p_load(usdm,tidyverse,ggplot2,PerformanceAnalytics,MASS,glmnet,investr,ggiraph,ggiraphExtra
,DT,mosaic,usdm,caTools,onewaytests)
# library(usdm) #for multicollinearity
# library(tidyverse)
# library(ggplot2)
# library(PerformanceAnalytics)
# library(MASS)
# library(glmnet)
# library(investr)
# library(ggiraph)
# library(ggiraphExtra) #https://cran.r-project.org/web/packages/ggiraphExtra/vignettes/ggPredict.html
# library(DT)
# library(mosaic)
# library(usdm) #for multicollinearity
# library(caTools)
sessionInfo()
ggplot(gather(select_at(data,target)), aes(value)) +
stat_qq() +
facet_wrap(~key, scales = 'free',ncol=4)
knitr::opts_chunk$set(echo = TRUE)
library(pacman) #manages autoinstallation of packages
pacman::p_load(usdm,tidyverse,ggplot2,PerformanceAnalytics,MASS,glmnet,investr,ggiraph,ggiraphExtra
,DT,mosaic,usdm,caTools,onewaytests)
# library(usdm) #for multicollinearity
# library(tidyverse)
# library(ggplot2)
# library(PerformanceAnalytics)
# library(MASS)
# library(glmnet)
# library(investr)
# library(ggiraph)
# library(ggiraphExtra) #https://cran.r-project.org/web/packages/ggiraphExtra/vignettes/ggPredict.html
# library(DT)
# library(mosaic)
# library(usdm) #for multicollinearity
# library(caTools)
sessionInfo()
output.var = params$output.var
transform.abs = params$transform.abs
log.pred = params$log.pred
eda = params$eda
algo.forward = params$algo.forward
algo.backward = params$algo.backward
algo.stepwise = params$algo.stepwise
algo.LASSO = params$algo.LASSO
algo.LARS = params$algo.LARS
message("Parameters used for training/prediction: ")
str(params)
# Setup Labels
# alt.scale.label.name = Alternate Scale variable name
#   - if predicting on log, then alt.scale is normal scale
#   - if predicting on normal scale, then alt.scale is log scale
if (log.pred == TRUE){
label.names = paste('log.',output.var,sep="")
alt.scale.label.name = output.var
}
if (log.pred == FALSE){
label.names = output.var
alt.scale.label.name = paste('log.',output.var,sep="")
}
feat  = read.csv('../../Data/features.csv')
labels = read.csv('../../Data/labels.csv')
predictors = names(dplyr::select(feat,-JobName))
target = 'y3'
data.ori = inner_join(feat,select_at(labels,c('JobName',target)),by='JobName')
cc  = complete.cases(data.ori)
data.notComplete = data.ori[! cc,]
data = data.ori[cc,]
message('Non-Complete cases: ',nrow(data.notComplete))
message('Complete cases: ',nrow(data))
ggplot(gather(select_at(data,target)), aes(value)) +
geom_histogram(aes(y=..density..),bins = 50,fill='light blue') +
geom_density() +
facet_wrap(~key, scales = 'free',ncol=4)
ggplot(gather(select_at(data,target)), aes(value)) +
stat_qq() +
facet_wrap(~key, scales = 'free',ncol=4)
gather(select_at(data,target)), aes(value)
gather(select_at(data,target))
ggplot(gather(select_at(data,target)), aes(sample=value)) +
stat_qq() +
facet_wrap(~key, scales = 'free',ncol=4)
ggplot(gather(select_at(data,cols)), aes(sample=value)) +
stat_qq()+
facet_wrap(~key, scales = 'free',ncol=4)
cols = c('x11','x18')
ggplot(gather(select_at(data,cols)), aes(sample=value)) +
stat_qq()+
facet_wrap(~key, scales = 'free',ncol=4)
cols = c('x11','x18')
ggplot(gather(select_at(data,cols)), aes(value)) +
geom_histogram(aes(y=..density..),bins = 50,fill='light blue') +
geom_density() +
facet_wrap(~key, scales = 'free',ncol=4)
ggplot(gather(select_at(data,cols)), aes(sample=value)) +
stat_qq()+
facet_wrap(~key, scales = 'free',ncol=4)
lapply(select_at(data,cols),summary)
ggplot(gather(select_at(data,cols)), aes(x=value,sample=value)) +
geom_histogram(aes(y=..density..),bins = 50,fill='light blue') +
geom_density() +
stat_qq()
ggplot(gather(select_at(data,cols)), aes(x=value,sample=value)) +
geom_histogram(aes(y=..density..),bins = 50,fill='light blue') +
geom_density() +
stat_qq()+
facet_wrap(~key, scales = 'free',ncol=4)
ggplot(gather(select_at(data,cols)), aes(x=value,sample=value)) +
geom_histogram(aes(y=..density..),bins = 50,fill='light blue') +
geom_density() +
#stat_qq()+
facet_wrap(~key, scales = 'free',ncol=4)
ggplot(gather(select_at(data,cols)), aes(x=value,sample=value)) +
geom_histogram(aes(y=..density..),bins = 50,fill='light blue') +
geom_density() +
stat_qq()+
facet_wrap(~key, scales = 'free',ncol=4)
ggplot(gather(select_at(data,predictors)), aes(sample=value)) +
stat_qq() +
facet_wrap(~key, scales = 'free',ncol=4)
qqplot(data$x14)
qqplot(y=data$x14)
qqplot(x=data$x14)
qqnorm(x=data$x14)
qqnorm(data$x14)
qqnorm(data$y3)
qqnorm(data$x14^2)
qqnorm(sqrt(data$x14))
qqnorm((data$x14)^1/4)
qqnorm((data$x14)^(1/4))
qqnorm((data$x14)^(1/34))
qqnorm((data$x14)^(34))
qqnorm((data$x14)^(3))
qqnorm(log(data$x14))
qqnorm(1/(data$x14))
qqnorm(1/(data$x14)^2)
qqnorm(1/((data$x14)^2))
qqnorm(1/((data$x14)^1/2))
qqnorm(1/((data$x14)^(1/2)))
qqnorm(1/((data$x14)^(1/42)))
qqnorm(sin(data$x14))
qqnorm(cos(data$x14))
qqnorm(tan(data$x14))
qqnorm(1/cos(data$x14))
install.packages('bestNormalize')
bestNormalize::bestNormalize(data$x14)
t=bestNormalize::bestNormalize(data$x14)
t
t$x
qqnorm(t$x)
t2=predict(t)
qqnorm(t2)
knitr::opts_chunk$set(echo = TRUE)
library(pacman) #manages autoinstallation of packages
pacman::p_load(usdm,tidyverse,ggplot2,PerformanceAnalytics,MASS,glmnet,investr,ggiraph,ggiraphExtra
,DT,mosaic,usdm,caTools,onewaytests
,bestNormalize)
# library(usdm) #for multicollinearity
# library(tidyverse)
# library(ggplot2)
# library(PerformanceAnalytics)
# library(MASS)
# library(glmnet)
# library(investr)
# library(ggiraph)
# library(ggiraphExtra) #https://cran.r-project.org/web/packages/ggiraphExtra/vignettes/ggPredict.html
# library(DT)
# library(mosaic)
# library(usdm) #for multicollinearity
# library(caTools)
sessionInfo()
cols = c('x11','x18')
ggplot(gather(select_at(data,cols)), aes(value)) +
geom_histogram(aes(y=..density..),bins = 50,fill='light blue') +
geom_density() +
facet_wrap(~key, scales = 'free',ncol=4)
ggplot(gather(select_at(data,cols)), aes(sample=value)) +
stat_qq()+
facet_wrap(~key, scales = 'free',ncol=4)
lapply(select_at(data,cols),summary)
t=bestNormalize::bestNormalize(data$x18)
t
newx18 = predict(t)
qnorm(newx18)
t=bestNormalize::bestNormalize(data$x18)
t
newx18 = predict(t)
qqnorm(newx18)
t=bestNormalize::bestNormalize(data$x11)
t
newx11 = predict(t)
qqnorm(newx11)
t=bestNormalize::bestNormalize(data$x11)
t
newx11 = predict(t)
qqnorm(data$x11)
qqnorm(newx11)
t=bestNormalize::bestNormalize(data$x3)
t
qqnorm(data$x3)
qqnorm( predict(t))
ggplot(gather(select_at(df,cols)), aes(value)) +
geom_histogram(aes(y=..density..),bins = 50,fill='light blue') +
geom_density() +
facet_wrap(~key, scales = 'free',ncol=4)
cols2=cols[!cols %in% c('y3')]
d = gather(dplyr::select_at(df,cols2),key=target,value=value,-y3log)
#chart.Correlation(select(data,-JobName),  pch=21)
t=round(cor(dplyr::select(data,-one_of(target,'JobName')),select_at(data,target)),4)
DT::datatable(t)
#chart.Correlation(select(data,-JobName),  pch=21)
t=round(cor(dplyr::select(data,-one_of('JobName'))),4)
DT::datatable(t,options=list(scrollX=T))
df=data %>%
mutate(x18sqrt = sqrt(x18)
,y3log = log(y3)
)
target='y3log'
cols=c('y3','y3log','x18','x18sqrt')
#removing unwanted variables
df=df %>%
dplyr::select(-x18sqrt,-y3)
d = gather(dplyr::select_at(df,c(predictors[1:5],target)),key=target,value=value,-y3log)
ggplot(data=d, aes(x=value,y=y3)) +
geom_point(color='light blue',alpha=0.5) +
geom_smooth() +
facet_wrap(~target, scales = 'free',ncol=4)
d = gather(dplyr::select_at(df,c(predictors[1:5],target)),key=target,value=value,-y3log)
ggplot(data=d, aes(x=value,y=y3log)) +
geom_point(color='light blue',alpha=0.5) +
geom_smooth() +
facet_wrap(~target, scales = 'free',ncol=4)
d = gather(dplyr::select_at(df,c(predictors[1:4],target)),key=target,value=value,-y3log)
ggplot(data=d, aes(x=value,y=y3log)) +
geom_point(color='light green',alpha=0.5) +
geom_smooth() +
facet_wrap(~target, scales = 'free',ncol=4)
knitr::opts_chunk$set(echo = TRUE)
library(pacman) #manages autoinstallation of packages
pacman::p_load(usdm,tidyverse,ggplot2,PerformanceAnalytics,MASS,glmnet,investr,ggiraph,ggiraphExtra
,DT,mosaic,usdm,caTools,onewaytests
,bestNormalize)
# library(usdm) #for multicollinearity
# library(tidyverse)
# library(ggplot2)
# library(PerformanceAnalytics)
# library(MASS)
# library(glmnet)
# library(investr)
# library(ggiraph)
# library(ggiraphExtra) #https://cran.r-project.org/web/packages/ggiraphExtra/vignettes/ggPredict.html
# library(DT)
# library(mosaic)
# library(usdm) #for multicollinearity
# library(caTools)
sessionInfo()
df=data %>%
mutate(x18sqrt = sqrt(x18)
,y3log = log(y3)
,x11sqrt = sqrt(x11)
)
target='y3log'
cols=c('y3','y3log','x18','x18sqrt')
cols=c('y3','y3log','x18','x18sqrt','x11','x11sqrt')
ggplot(gather(select_at(df,cols)), aes(value)) +
geom_histogram(aes(y=..density..),bins = 50,fill='light blue') +
geom_density() +
facet_wrap(~key, scales = 'free',ncol=4)
df=data %>%
mutate(x18sqrt = sqrt(x18)
,y3log = log(y3)
,x11sqrt = (x11)^2
)
target='y3log'
cols=c('y3','y3log','x18','x18sqrt','x11','x11sqrt')
ggplot(gather(select_at(df,cols)), aes(value)) +
geom_histogram(aes(y=..density..),bins = 50,fill='light blue') +
geom_density() +
facet_wrap(~key, scales = 'free',ncol=4)
df=data %>%
mutate(x18sqrt = sqrt(x18)
,y3log = log(y3)
)
target='y3log'
cols=c('y3','y3log','x18','x18sqrt')
ggplot(gather(select_at(df,cols)), aes(value)) +
geom_histogram(aes(y=..density..),bins = 50,fill='light blue') +
geom_density() +
facet_wrap(~key, scales = 'free',ncol=4)
t=bestNormalize::bestNormalize(data$y3)
t
qqnorm(data$y3)
qqnorm(predict(t))
