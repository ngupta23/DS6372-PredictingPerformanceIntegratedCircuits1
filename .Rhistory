geom_point(color='blue',alpha=0.7) +
facet_wrap(~metric,ncol=4,scales='free_y')+
theme_light()
ggplot(data=dataPlot,aes(x=id,y=value) ) +
geom_line(color='royalblue2') +
geom_point(color='blue',alpha=0.7) +
facet_wrap(~metric,ncol=4,scales='free_y')+
theme_light()
ggplot(data=dataPlot,aes(x=id,y=value) ) +
geom_line(color='royalblue2') +
geom_point(color='blue',alpha=0.7,size=2) +
facet_wrap(~metric,ncol=4,scales='free_y')+
theme_light()
ggplot(data=dataPlot,aes(x=id,y=value) ) +
geom_line(color='royalblue2') +
geom_point(color='blue',alpha=0.7,size=.5) +
facet_wrap(~metric,ncol=4,scales='free_y')+
theme_light()
ggplot(data=dataPlot,aes(x=id,y=value) ) +
geom_line(color='royalblue2') +
geom_point(color='blue',alpha=0.7,size=.9) +
facet_wrap(~metric,ncol=4,scales='free_y')+
theme_light()
ggplot(data=dataPlot,aes(x=id,y=value) ) +
geom_line(color='lightblue4') +
geom_point(color='blue',alpha=0.7,size=.9) +
facet_wrap(~metric,ncol=4,scales='free_y')+
theme_light()
ggplot(data=dataPlot,aes(x=id,y=value) ) +
geom_line(color='lightblue1') +
geom_point(color='blue',alpha=0.7,size=.9) +
facet_wrap(~metric,ncol=4,scales='free_y')+
theme_light()
ggplot(data=dataPlot,aes(x=id,y=value) ) +
geom_line(color='lightblue4') +
geom_point(color='blue',alpha=0.7,size=.9) +
facet_wrap(~metric,ncol=4,scales='free_y')+
theme_light()
dataPlot = cbind(model.caret$results, id=as.numeric(rownames(model.caret$results))) %>%
gather(key='metric',value='value',-id) %>%
dplyr::filter(metric %in% c('MAE','RMSE','Rsquared'))
mtetricsPlot = ggplot(data=dataPlot,aes(x=id,y=value) ) +
geom_line(color='lightblue4') +
geom_point(color='blue',alpha=0.7,size=.9) +
facet_wrap(~metric,ncol=4,scales='free_y')+
theme_light()
plot(metricsPlot)
dataPlot=data.frame(pred=predict(model.caret,data),res=resid(model.caret))
residPlot = ggplot(dataPlot,aes(x=pred,y=res)) +
geom_point(color='light blue',alpha=0.7) +
geom_smooth()+
theme_light()
plot(residPlot)
dataPlot=data.frame(pred=predict(model.caret,data),res=resid(model.caret))
residPlot = ggplot(dataPlot,aes(x=pred,y=res)) +
geom_point(color='light blue',alpha=0.7) +
geom_smooth()+
theme_light()
plot(residPlot)
high.cd = names(cd.full[cd.full > 4/nrow(data.train)])
data.train2 = data.train[!(rownames(data.train)) %in% high.cd,]
model.full2 = lm(formula , data.train2)
summary(model.full2)
cd.full2 = plot.diagnostics(model.full2, data.train2)
high.cd
names(data.train2 )
names(data.train2)
head(data.train2)
names(data.train2)
transmute(data.train,type=ifelse(n() %in% high.cd,'High','Normal'))
high.cd
transmute(data.train,n=n(),type=ifelse(n() %in% high.cd,'High','Normal'))
transmute(data.train,n=rownumber(),type=ifelse(n() %in% high.cd,'High','Normal'))
transmute(data.train,n=row_number(),type=ifelse(n() %in% high.cd,'High','Normal'))
transmute(data.train,n=row_number(),type=ifelse(row_number() %in% high.cd,'High','Normal'))
# much more normal residuals than before.
# See if you can check the distribution (boxplots) of the high leverage points and the other points
# High Leverage Plot MMORO ###
plotData = transmute(data.train,n=row_number(),type=ifelse(row_number() %in% high.cd,'High','Normal'))
table(plotData$type)
lenght(high.cd)
nrow(high.cd)
high.cd
length(high.cd)
table(plotData$type)
length(data.train)
nrow(cd.full)
length(cd.full)
data.train
length(data.train)
nrow(data.train)
nrow(plotData)
summary(high.cd)
# much more normal residuals than before.
# See if you can check the distribution (boxplots) of the high leverage points and the other points
# High Leverage Plot MMORO ###
plotData = transmute(data.train,n=row_number(),type=ifelse(row_number() %in% as.numeric(high.cd),'High','Normal'))
table(plotData$type)
length(high.cd)
as.numeric(high.cd)
any(duplicated(as.numeric(high.cd)))
summary((as.numeric(high.cd))
)
high.cd
model.full = lm(formula , data.train)
summary(model.full)
cd.full = plot.diagnostics(model.full, data.train)
str(high.cd)
high.cd
str(cd.full)
cd.full
length(cd.full)
rownames(cd.full)
View(cd.full)
cooks.distance(model.full)
data.train
head(data.train)
names(data.train)
rownames(data.train)
transmute(data.train,n=rownames(),type=ifelse(row_number() %in% as.numeric(high.cd),'High','Normal'))
data.train %>% rownames_to_column()
# much more normal residuals than before.
# See if you can check the distribution (boxplots) of the high leverage points and the other points
# High Leverage Plot MMORO ###
plotData = data.train %>% rownames_to_column() %>% transmute(type=ifelse(rowname %in% high.cd,'High','Normal'))
plotData
table(plotData$type)
formula
as.formula(paste(paste(n[n %in% label.names], collapse = " + ")," ~", paste(n[!n %in% label.names], collapse = " + ")))
label.names
# much more normal residuals than before.
# See if you can check the distribution (boxplots) of the high leverage points and the other points
# High Leverage Plot MMORO ###
plotData = data.train %>% rownames_to_column() %>% transmute(type=ifelse(rowname %in% high.cd,'High','Normal'),!label.names)
# much more normal residuals than before.
# See if you can check the distribution (boxplots) of the high leverage points and the other points
# High Leverage Plot MMORO ###
plotData = data.train %>% rownames_to_column() %>% transmute_at(type=ifelse(rowname %in% high.cd,'High','Normal'),!label.names)
# much more normal residuals than before.
# See if you can check the distribution (boxplots) of the high leverage points and the other points
# High Leverage Plot MMORO ###
plotData = data.train %>% rownames_to_column() %>% transmute_at(type=ifelse(rowname %in% high.cd,'High','Normal'),label.names)
# much more normal residuals than before.
# See if you can check the distribution (boxplots) of the high leverage points and the other points
# High Leverage Plot MMORO ###
plotData = data.train %>% rownames_to_column() %>% transmute_at(type=ifelse('rowname' %in% high.cd,'High','Normal'),label.names)
# much more normal residuals than before.
# See if you can check the distribution (boxplots) of the high leverage points and the other points
# High Leverage Plot MMORO ###
plotData = data.train %>% rownames_to_column() %>% transmute(type=ifelse(rowname %in% high.cd,'High','Normal'),[label.names])
# much more normal residuals than before.
# See if you can check the distribution (boxplots) of the high leverage points and the other points
# High Leverage Plot MMORO ###
plotData = data.train %>% rownames_to_column() %>% transmute(type=ifelse(rowname %in% high.cd,'High','Normal'),[[label.names]])
# much more normal residuals than before.
# See if you can check the distribution (boxplots) of the high leverage points and the other points
# High Leverage Plot MMORO ###
plotData = data.train %>% rownames_to_column() %>% transmute(type=ifelse(rowname %in% high.cd,'High','Normal'),one_of(label.names))
select(data.train,one_of(label.names))
dplyr::select(data.train,one_of(label.names))
dplyr::select(data.train,x11,one_of(label.names))
# much more normal residuals than before.
# See if you can check the distribution (boxplots) of the high leverage points and the other points
# High Leverage Plot MMORO ###
plotData = data.train %>%
rownames_to_column() %>%
transmute(type=ifelse(rowname %in% high.cd,'High','Normal'),one_of(label.names))
# much more normal residuals than before.
# See if you can check the distribution (boxplots) of the high leverage points and the other points
# High Leverage Plot MMORO ###
plotData = data.train %>%
rownames_to_column() %>%
mutate(type=ifelse(rowname %in% high.cd,'High','Normal')) %>%
select(type,one_of(label.names))
# much more normal residuals than before.
# See if you can check the distribution (boxplots) of the high leverage points and the other points
# High Leverage Plot MMORO ###
plotData = data.train %>%
rownames_to_column() %>%
mutate(type=ifelse(rowname %in% high.cd,'High','Normal')) %>%
dplyr::select(type,one_of(label.names))
data.train %>%
rownames_to_column() %>%
mutate(type=ifelse(rowname %in% high.cd,'High','Normal')) %>%
mutate(target = one_of(label.names))
data.train %>%
rownames_to_column() %>%
mutate(type=ifelse(rowname %in% high.cd,'High','Normal')) %>%
mutate_at(target , label.names)
data.train %>%
rownames_to_column() %>%
mutate(type=ifelse(rowname %in% high.cd,'High','Normal')) %>%
mutate_at('target' , label.names)
data.train %>%
rownames_to_column() %>%
mutate(type=ifelse(rowname %in% high.cd,'High','Normal')) %>%
mutate_at('target' , vars(label.names))
# much more normal residuals than before.
# See if you can check the distribution (boxplots) of the high leverage points and the other points
# High Leverage Plot MMORO ###
plotData = data.train %>%
rownames_to_column() %>%
mutate(type=ifelse(rowname %in% high.cd,'High','Normal')) %>%
mutate_at('target' , funs('=',label.names))
# much more normal residuals than before.
# See if you can check the distribution (boxplots) of the high leverage points and the other points
# High Leverage Plot MMORO ###
plotData = data.train %>%
rownames_to_column() %>%
mutate(type=ifelse(rowname %in% high.cd,'High','Normal')) %>%
mutate_at('target' , funs(label.names))
# much more normal residuals than before.
# See if you can check the distribution (boxplots) of the high leverage points and the other points
# High Leverage Plot MMORO ###
plotData = data.train %>%
rownames_to_column() %>%
mutate(type=ifelse(rowname %in% high.cd,'High','Normal')) %>%
dplyr::select(type,t=one_of(label.names))
plotData
# much more normal residuals than before.
# See if you can check the distribution (boxplots) of the high leverage points and the other points
# High Leverage Plot MMORO ###
plotData = data.train %>%
rownames_to_column() %>%
mutate(type=ifelse(rowname %in% high.cd,'High','Normal')) %>%
dplyr::select(type,target=one_of(label.names))
plotData$t
plotData
#cd.compare  = data.frame(cd = cd.full) %>% mutate(type = ifelse(cd > 4/nrow(data.train),'High','Normal'))
ggplot(data=plotData, aes(x=type,y=target)) +
geom_boxplot(fill='light blue') +
scale_y_continuous(trans='log',name="Cook's Distance (log)") +
theme_light() +
ggtitle('Distribution of High Leverage Points and Normal  Points')
#cd.compare  = data.frame(cd = cd.full) %>% mutate(type = ifelse(cd > 4/nrow(data.train),'High','Normal'))
ggplot(data=plotData, aes(x=type,y=target)) +
geom_boxplot(fill='light blue') +
scale_y_continuous(name="Cook's Distance (log)") +
theme_light() +
ggtitle('Distribution of High Leverage Points and Normal  Points')
#cd.compare  = data.frame(cd = cd.full) %>% mutate(type = ifelse(cd > 4/nrow(data.train),'High','Normal'))
ggplot(data=plotData, aes(x=type,y=target)) +
geom_boxplot(fill='light blue',outlier.shape=NA) +
scale_y_continuous(name="Cook's Distance (log)") +
theme_light() +
ggtitle('Distribution of High Leverage Points and Normal  Points')
#cd.compare  = data.frame(cd = cd.full) %>% mutate(type = ifelse(cd > 4/nrow(data.train),'High','Normal'))
ggplot(data=plotData, aes(x=type,y=target)) +
geom_boxplot(fill='light blue',outlier.shape=NA,coef=2) +
scale_y_continuous(name="Cook's Distance (log)") +
theme_light() +
ggtitle('Distribution of High Leverage Points and Normal  Points')
#cd.compare  = data.frame(cd = cd.full) %>% mutate(type = ifelse(cd > 4/nrow(data.train),'High','Normal'))
ggplot(data=plotData, aes(x=type,y=target)) +
geom_boxplot(fill='light blue',outlier.shape=NA,coef=1) +
scale_y_continuous(name="Cook's Distance (log)") +
theme_light() +
ggtitle('Distribution of High Leverage Points and Normal  Points')
#cd.compare  = data.frame(cd = cd.full) %>% mutate(type = ifelse(cd > 4/nrow(data.train),'High','Normal'))
ggplot(data=plotData, aes(x=type,y=target)) +
geom_boxplot(fill='light blue',outlier.shape=NA,coef=1.5) +
scale_y_continuous(name="Cook's Distance (log)") +
theme_light() +
ggtitle('Distribution of High Leverage Points and Normal  Points')
#cd.compare  = data.frame(cd = cd.full) %>% mutate(type = ifelse(cd > 4/nrow(data.train),'High','Normal'))
ggplot(data=plotData, aes(x=type,y=target)) +
geom_boxplot(fill='light blue',outlier.shape=NA,coef) +
scale_y_continuous(name="Cook's Distance (log)") +
theme_light() +
ggtitle('Distribution of High Leverage Points and Normal  Points')
#cd.compare  = data.frame(cd = cd.full) %>% mutate(type = ifelse(cd > 4/nrow(data.train),'High','Normal'))
ggplot(data=plotData, aes(x=type,y=target)) +
geom_boxplot(fill='light blue',outlier.shape=NA) +
scale_y_continuous(name="Cook's Distance (log)") +
theme_light() +
ggtitle('Distribution of High Leverage Points and Normal  Points')
ggplot(data=plotData, aes(x=type,y=target)) +
geom_boxplot(fill='light blue',outlier.shape=NA) +
scale_y_continuous(name="Target Variable Values") +
theme_light() +
ggtitle('Distribution of High Leverage Points and Normal  Points')
model.caret$finalModel
MASS:studres(model.caret)
MASS::studres(model.caret)
MASS::studres(model.caret$finalModel)
method = "leapForward"
train.control <- trainControl(method = "cv"
,number = 10
,search = "grid"
,verboseIter = TRUE
,allowParallel = TRUE
)
tune.grid = data.frame(nvmax = 1:length(feature.names))
# http://sshaikh.org/2015/05/06/parallelize-machine-learning-in-r-with-multi-core-cpus/
cl <- makeCluster(detectCores()*0.75) # use 75% of cores only, leave rest for other tasks
registerDoParallel(cl)
set.seed(1)
# note that the seed has to actually be set just before this function is called
# settign is above just not ensure reproducibility for some reason
model.caret <- caret::train(formula
, data = data
, method = method
, tuneGrid = tune.grid
, trControl = train.control
, preProc = pre.proc
)
stopCluster(cl)
registerDoSEQ() # register sequential engine in case you are not using this function anymore
model = model.caret$finalModel
# Residuals-studentized Plot  MMORO #
t=MASS:studres(model)
# Residuals-studentized Plot  MMORO #
t=MASS::studres(model)
model.caret$metric
model.caret$finalModel$np
model.caret$finalModel$ress
model.caret$finalModel$lopt
model.caret$finalModel$param
# Residuals-studentized Plot  MMORO #
t=MASS::studres( model.caret)
MASS::studres(model.caret$finalModel)
plotres(model.caret,type='raw')
plotres::plotres(model.caret,type='raw')
install.packages('plotres')
install.packages('plotmo')
plotmo::plotres(model.caret,type='raw')
library(caret) ## caret
set.seed(2015)
caret.earth.mod <- train(O3~., data=ozone1, method="earth",
tuneGrid=data.frame(degree=2, nprune=10))
plotres(caret.earth.mod, type="raw")
library(plotmo)
library(caret) ## caret
set.seed(2015)
caret.earth.mod <- train(O3~., data=ozone1, method="earth",
tuneGrid=data.frame(degree=2, nprune=10))
plotres(caret.earth.mod, type="raw")
library(caret) ## caret
set.seed(2015)
caret.earth.mod <- train(O3~., data=ozone1, method="earth",
tuneGrid=data.frame(degree=2, nprune=10))
plotres(caret.earth.mod, type="raw")
library(earth) # for ozone1 data
data(ozone1)
install.packages('earth')
library(earth) # for ozone1 data
data(ozone1)
library(caret) ## caret
set.seed(2015)
caret.earth.mod <- train(O3~., data=ozone1, method="earth",
tuneGrid=data.frame(degree=2, nprune=10))
plotres(caret.earth.mod, type="raw")
library(caret) ## caret
set.seed(2015)
caret.earth.mod <- train(O3~., data=ozone1, method="earth",
tuneGrid=data.frame(degree=2, nprune=10))
plot(plotres(caret.earth.mod, type="raw"))
plotres(caret.earth.mod, type="raw")
t=plotres(caret.earth.mod, type="raw")
t$rect
t$text
plot(model)
plot(model.caret)
plot(model)
par(mfrow=c(2,2))
plot(model)
influencePlot(model, id.method="identify", main="Influence Plot", sub="Circle size is proportional to Cook's Distance")
packages <- c("plyr", "dplyr", "tidyr", "psych", "reshape2", "corrplot", "GGally", "ggplot2", "Amelia", "pastecs", "leaps", "MASS", "car","caret")
pacman::p_load(packages)
pacman::p_load(c("plyr", "dplyr", "tidyr", "psych", "reshape2", "corrplot", "GGally", "ggplot2", "Amelia", "pastecs", "leaps", "MASS", "car","caret"))
pacman::p_load(char=c("plyr", "dplyr", "tidyr", "psych", "reshape2", "corrplot", "GGally", "ggplot2", "Amelia", "pastecs", "leaps", "MASS", "car","caret"))
influencePlot(model, id.method="identify", main="Influence Plot", sub="Circle size is proportional to Cook's Distance")
influencePlot(model.caret, id.method="identify", main="Influence Plot", sub="Circle size is proportional to Cook's Distance")
install.packages('olsrr')
ols_srsd_plot(model)
olsrr::ols_srsd_plot(model)
olsrr::ols_plot_diagnostics(model)
olsrr::ols_plot_diagnostics(model.caret)
method
plot.regsubsets(model)
leaps::plot.regsubsets(model)
leaps:::plot.regsubsets(model)
leaps:::plot.regsubsets(model)
x<-matrix(rnorm(100),ncol=4)
y<-rnorm(25)
leaps(x,y)
x<-matrix(rnorm(100),ncol=4)
y<-rnorm(25)
t=leaps(x,y)
rstudent(t)
t
model
method
residPlot(model)
FLA::residPlot(model)
stats::residPlot(model)
install.packages('FSA')
FSA::residPlot(model)
summary(model)
t=summary(model)
t$adjr2
t$obj$param
t
t$which
t$cp
t$bic
t$outmat
model$obsLevels
model$ress
model$lopt
model$lopt$
model.caret$modelInfo$sort()
model.caret$pred
model.caret$bestTune
model.caret$dots
model.caret$control
model.caret$xlevels
dataPlot=data.frame(pred=predict(model.caret,data),res=resid(model.caret))
residPlot = ggplot(dataPlot,aes(x=pred,y=res)) +
geom_point(color='light blue',alpha=0.7) +
geom_smooth()+
theme_light()
plot(residPlot)
ggplot(dataPlot,aes(x=pred,y=res)) +
geom_histogram(color='light blue',alpha=0.7)
ggplot(dataPlot,aes(x=res)) +
geom_histogram(color='light blue',alpha=0.7)
ggplot(dataPlot,aes(x=res)) +
geom_density(color='light blue',alpha=0.7)
gplot(dataPlot,aes(x=res)) +
geom_histogram(aes(y=..density..),fill='light blue',alpha=0.7) +
geom_density() +
theme_light()
ggplot(dataPlot,aes(x=res)) +
geom_histogram(aes(y=..density..),fill='light blue',alpha=0.7) +
geom_density() +
theme_light()
ggplot(dataPlot,aes(x=res)) +
geom_histogram(aes(y=..density..),fill='light blue',alpha=0.7) +
geom_density(line='blue') +
theme_light()
ggplot(dataPlot,aes(x=res)) +
geom_histogram(aes(y=..density..),fill='light blue',alpha=0.7) +
geom_density(color='blue') +
theme_light()
ggplot(dataPlot,aes(x=res)) +
geom_histogram(aes(y=..density..),fill='light blue',alpha=1) +
geom_density(color='blue') +
theme_light()
ggplot(dataPlot,aes(x=res)) +
geom_histogram(aes(y=..density..),fill='light blue',alpha=1) +
geom_density() +
theme_light()
ggplot(dataPlot,aes(x=res)) +
geom_histogram(aes(y=..density..),fill='light blue',alpha=1) +
geom_density(color='gray') +
theme_light()
ggplot(dataPlot,aes(x=res)) +
geom_histogram(aes(y=..density..),fill='light blue',alpha=1) +
geom_density(color='darkgray') +
theme_light()
ggplot(dataPlot,aes(x=res)) +
geom_histogram(aes(y=..density..),fill='light blue',alpha=1) +
geom_density(color='blue') +
theme_light()
ggplot(dataPlot,aes(x=res)) +
geom_histogram(aes(y=..density..),fill='light blue',alpha=1) +
geom_density(color='blue',alpha=0.8) +
theme_light()
ggplot(dataPlot,aes(x=res)) +
geom_histogram(aes(y=..density..),fill='light blue',alpha=1) +
geom_density(color='blue',alpha=0.3) +
theme_light()
ggplot(dataPlot,aes(x=res)) +
geom_histogram(aes(y=..density..),fill='light blue',alpha=1) +
geom_density(color='lightblue4') +
theme_light()
ggplot(dataPlot,aes(x=res)) +
geom_histogram(aes(y=..density..),fill='light blue',alpha=1) +
geom_density(color='lightblue3') +
theme_light()
ggplot(dataPlot,aes(x=res)) +
geom_histogram(aes(y=..density..),fill='light blue',alpha=1) +
geom_density(color='lightblue5') +
theme_light()
ggplot(dataPlot,aes(x=res)) +
geom_histogram(aes(y=..density..),fill='light blue',alpha=1) +
geom_density(color='lightblue4') +
theme_light()
install.packages('lmar')
pacman::p_load("dplyr", "DT", "mosaic", "MASS", "usdm", "tidyverse", "ggplot2", "PerformanceAnalytics", "caTools", "glmnet", "caret","leaps","doParallel","lars")
pacman::p_load("dplyr", "DT", "mosaic", "MASS", "usdm", "tidyverse", "ggplot2", "PerformanceAnalytics", "caTools", "glmnet", "caret","leaps","doParallel","lars","bestNormalize")
pacman::p_load("dplyr", "DT", "mosaic", "MASS", "usdm", "tidyverse", "ggplot2", "PerformanceAnalytics", "caTools", "glmnet", "caret","leaps","doParallel","lars","bestNormalize")
data[alt.scale.label.name]
alt.scale.label.name
alt.scale.label.name
output.var
label.names = paste('norm.',output.var,sep="")
alt.scale.label.name = output.var
data[alt.scale.label.name]
t=bestNormalize::bestNormalize(data[alt.scale.label.name])
t=bestNormalize::bestNormalize(as.numeric(data[alt.scale.label.name]))
data[alt.scale.label.name]
head(data[alt.scale.label.name])
t=bestNormalize::bestNormalize(as.numeric(data[[alt.scale.label.name]]))
t=bestNormalize::bestNormalize(data[[alt.scale.label.name]])
label.names
data[label.names] = t
data[label.names] = predict(t)
c(alt.scale.label.name)
drops = c(alt.scale.label.name)
data = data[!(names(data) %in% drops)]
